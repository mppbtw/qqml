stages:
    - Build
    - Test
    - Format
    - Lint

Format QQML:
    image: rustlang/rust:nightly
    stage: Format
    script:
        cargo +nightly fmt --all --verbose --check

Lint QQML:
    image: rust
    stage: Lint
    before_script:
        - rustup component add clippy
        - apt-get update && apt-get -y install build-essential && apt-get install -y wget && rm -rf /var/lib/apt/lists/* && wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-Linux-x86_64.sh -q -O /tmp/cmake-install.sh && chmod u+x /tmp/cmake-install.sh && mkdir /opt/cmake-3.24.1 && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.24.1 && rm /tmp/cmake-install.sh && ln -s /opt/cmake-3.24.1/bin/* /usr/local/bin
    script:
        RUSTFLAGS="-Dwarnings" cargo clippy --verbose

Build QQML:
    image: rust
    stage: Build
    before_script:
        # boy do i love ubuntu
        - apt-get update && apt-get -y install build-essential && apt-get install -y wget && rm -rf /var/lib/apt/lists/* && wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-Linux-x86_64.sh -q -O /tmp/cmake-install.sh && chmod u+x /tmp/cmake-install.sh && mkdir /opt/cmake-3.24.1 && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.24.1 && rm /tmp/cmake-install.sh && ln -s /opt/cmake-3.24.1/bin/* /usr/local/bin
    script:
        cargo build

Test QQML:
    image: rust
    stage: Test
    before_script:
        # we need to do this nonsense to get cmake on ubuntu i think
        - apt-get update && apt-get -y install build-essential && apt-get install -y wget && rm -rf /var/lib/apt/lists/* && wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-Linux-x86_64.sh -q -O /tmp/cmake-install.sh && chmod u+x /tmp/cmake-install.sh && mkdir /opt/cmake-3.24.1 && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.24.1 && rm /tmp/cmake-install.sh && ln -s /opt/cmake-3.24.1/bin/* /usr/local/bin
    script:
        cargo test

Format QPM:
    image: golang
    stage: Format
    script: cd ./qpm/ && test -z $(gofmt -s -w .)

Lint QPM:
    image: golang
    stage: Lint
    script: cd ./qpm/ && go vet .

Test QPM:
    image: golang
    stage: Test
    script: cd ./qpm/ && go test -v . ./...
